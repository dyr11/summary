#include<vector>
#include<iostream>
#include<fstream>
#include<sstream>
#include<string>
#include<algorithm>
#include<functional>
#include<stdlib.h>
#include<time.h>

using namespace std;

int findMinN(int *arrA,int * arrB,int lenA,int lenB,const int i,int first,int last){

	if(i>lenB+lenA){
		cout<<"error1"<<endl;
		return -1;
	}
	if(first<i-lenB)
		first=i-lenB-1;

	if(first>last){
		//cout<<"b"<<endl;
		return findmedian(arrB,arrA,lenA,lenB,i,0,lenB-1);
	}

	vector<int > t;
	copy(arrA,arrA+lenA,back_inserter(t));

	if(i<last){
		last=i;
	}

	//if(i==1&&arrA[0]<=arrB[0])
	//	return arrA[0];
	//if(i==lenB+1&&arrA[0]>=arrB[lenB-1])
	//	return arrA[0];

	//if(i==lenA && arrA[lenA-1]<=arrB[0])
	//	return arrA[lenA-1];

	//if(i==lenA+lenB && arrA[lenA-1]>= arrB[lenB-1])
	//	return arrA[lenA-1];

	int mid=(first+last)/2;
	if(mid+1==i&&arrA[mid]<=arrB[0])
		return arrA[mid];
	else if(mid+1==i&&arrA[mid]>arrB[0])
		return findmedian(arrA,arrB,lenA,lenB,i,first,mid-1);
	else if(mid+1+lenB==i&&arrA[mid]>=arrB[lenB-1])
		return arrA[mid];
	else if(mid+1+lenB==i&&arrA[mid]<arrB[lenB-1])
		return  findmedian(arrA,arrB,lenA,lenB,i,mid+1,last);
	else if (arrA[mid]>=arrB[i-mid-2]&& arrA[mid]<=arrB[i-mid-1])
		return arrA[mid];
	else if(arrA[mid]>arrB[i-mid-1])
		return findmedian(arrA,arrB,lenA,lenB,i,first,mid-1);
	else
		return  findmedian(arrA,arrB,lenA,lenB,i,mid+1,last);

}

bool cal(){
	int x[100],y[100];
	vector<int> comb;

	for (int i = 0; i < 100; i++)
	{
		x[i]=rand()%1000;
		y[i]=rand()%1000;
		comb.push_back(x[i]);
		comb.push_back(y[i]);
	}

	//ofstream file("a.txt");
	//for (int i = 0; i < 100; i++)
	//{
	//	file<<x[i]<< " ";
	//}
	//file<<endl;
	//for (int i = 0; i < 100; i++)
	//{
	//	file<<y[i]<< " ";
	//}
	//file<<endl;

	//ifstream file("a.txt");
	//string s;
	//getline(file,s);
	//stringstream st1(s);
	//for (int i = 0; i < 100; i++)
	//{
	//	st1>>x[i];
	//	comb.push_back(x[i]);
	//}

	//getline(file,s);

	//stringstream st2(s);
	//for (int i = 0; i < 100; i++)
	//{
	//	st2>>y[i];
	//	comb.push_back(y[i]);
	//}

	sort(x,x+100);
	sort(y,y+100);
	sort(comb.begin(),comb.end());
	//int pos=rand()%200+1;
	int pos=1;
	cout<<"pos:"<<pos<<endl;
	cout<<comb[pos-1]<<endl;
	if(comb[pos-1]==findmedian(x,y,100,100,pos,0,99))
		return true;
	else
		return false;
}

int main(){

		srand(time(NULL));
	for (int i = 0; i < 10000; i++)
	{
		if(!cal()){
			cout<<"err!"<<endl;
			break;
		}

		//break;
	}

}
